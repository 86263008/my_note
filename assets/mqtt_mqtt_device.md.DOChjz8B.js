import{_ as d,C as s,c as o,o as e,a0 as l,b as c,w as a,a as p,G as n,a1 as r}from"./chunks/framework.CUtHynuh.js";const y=JSON.parse('{"title":"基于Mqtt的虚拟设备","description":"","frontmatter":{"title":"基于Mqtt的虚拟设备","outline":"deep"},"headers":[],"relativePath":"mqtt/mqtt_device.md","filePath":"mqtt/mqtt_device.md"}'),h={name:"mqtt/mqtt_device.md"};function u(g,t,m,b,v,_){const i=s("Mermaid");return e(),o("div",null,[t[1]||(t[1]=l(`<h1 id="基于mqtt的虚拟设备" tabindex="-1">基于Mqtt的虚拟设备 <a class="header-anchor" href="#基于mqtt的虚拟设备" aria-label="Permalink to &quot;基于Mqtt的虚拟设备&quot;">​</a></h1><h2 id="动机" tabindex="-1">动机 <a class="header-anchor" href="#动机" aria-label="Permalink to &quot;动机&quot;">​</a></h2><p>在物联网设备的开发过程中，由于设备的种类众多，设备的状态与控制方式各异，造成以下问题：</p><ol><li><p>每种设计设备的控制和调试方法都不同</p></li><li><p>业务流程与设备特定的协议高度耦合，扩展性差、维护成本高</p></li></ol><h2 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h2><ol><li><p>通过Mqtt消息解耦设备自定义的控制方式与业务流之间的交互，不同设备以统一的方式参与业务流的编排</p></li><li><p>方便设备的外部调试</p></li></ol><blockquote><p>设备以独立进程运行，可以分布式的通过Mqtt消息获取设备状态与控制</p></blockquote><ol start="3"><li>方便设备的仿真</li></ol><blockquote><p>仅通过Mqtt消息即可模拟设备的状态与控制</p></blockquote><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><h3 id="状态发布-设备端" tabindex="-1">状态发布（设备端） <a class="header-anchor" href="#状态发布-设备端" aria-label="Permalink to &quot;状态发布（设备端）&quot;">​</a></h3><p>外设通过Mqtt协议以<code>订阅/发布</code>模式发布设备状态</p><ol><li><p>定时发布完整状态</p></li><li><p>状态变更时发布变更状态</p></li></ol><h3 id="控制" tabindex="-1">控制 <a class="header-anchor" href="#控制" aria-label="Permalink to &quot;控制&quot;">​</a></h3><p>外设通过Mqtt协议以<code>请求/响应</code>模式对外提供设备控制</p><h2 id="主题-topic-设计" tabindex="-1">主题(topic)设计 <a class="header-anchor" href="#主题-topic-设计" aria-label="Permalink to &quot;主题(topic)设计&quot;">​</a></h2><p>基于设备类型、设备ID、消息类型等维度进行分层设计。以下是一套推荐的主题命名方案，采用<code>/</code>作为层级分隔符，并提供详细的说明：</p><ol><li><p>基础主题结构</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/{device_type}/{device_id}/{message_type}</span></span></code></pre></div><ul><li><strong><code>system_id</code></strong>: 系统唯一标识，用于区分不同项目或系统（例如：<code>company/project</code>）。</li><li><strong><code>device_type</code></strong>: 设备的类型（如 <code>sensor</code>, <code>actuator</code>, <code>controller</code> 等）。</li><li><strong><code>device_id</code></strong>: 设备的唯一标识符（如 <code>dev001</code>, <code>sensor-007</code> 等）。</li><li><strong><code>message_type</code></strong>: 消息的类型（如 <code>status</code>, <code>event</code>, <code>config</code> 等）。</li></ul></li><li><p>具体主题示例</p><p>2.1 定时上报状态</p><p>当设备按固定时间间隔上报状态时，主题名可设计为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/{device_type}/{device_id}/status/timer</span></span></code></pre></div><p>说明：</p><ul><li><code>status/timer</code>：表示这是一个定时上报的状态消息。</li></ul><p>2.2 状态变更时上报</p><p>当设备状态发生变化时主动上报，主题名可设计为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/{device_type}/{device_id}/status/change</span></span></code></pre></div><p>说明：</p><ul><li><code>status/change</code>：表示这是一个因状态变更触发的上报消息。</li></ul><p>2.3 配置信息下发</p><p>如果上位机需要下发配置给设备，主题名可设计为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/{device_type}/{device_id}/config/update</span></span></code></pre></div><p>说明：</p><ul><li><code>config/update</code>：表示这是一个配置更新消息。</li></ul></li><li><p>通配符订阅</p></li></ol><p>MQTT支持通配符订阅，方便批量处理消息：</p><ul><li><strong>单层通配符 <code>+</code></strong>：匹配某一层级的任意值。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/{device_type}/+/status/timer  // 订阅所有传感器的定时状态上报</span></span></code></pre></div><ul><li><strong>多层通配符 <code>#</code></strong>：匹配多层级的所有值。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/#  // 订阅该项目下所有设备的所有消息</span></span></code></pre></div><ol start="4"><li>扩展建议</li></ol><ul><li><strong>添加版本号</strong>：在主题中加入版本号（如 <code>v1</code>），方便后续迭代和兼容性管理。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/v1/{device_type}/{device_id}/status/timer</span></span></code></pre></div><ul><li><strong>添加子类型</strong>：如果状态消息包含多种子类型（如 <code>online</code>, <code>offline</code>, <code>error</code>），可以进一步细分：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{system_id}/v1/{device_type}/{device_id}/status/timer/online</span></span>
<span class="line"><span>{system_id}/v1/{device_type}/{device_id}/status/timer/error</span></span></code></pre></div><p>通过这种分层设计，主题结构清晰，易于扩展和维护，同时也能利用MQTT的通配符特性实现高效的消息订阅和处理。</p><h2 id="系统设计" tabindex="-1">系统设计 <a class="header-anchor" href="#系统设计" aria-label="Permalink to &quot;系统设计&quot;">​</a></h2><h3 id="输入" tabindex="-1">输入 <a class="header-anchor" href="#输入" aria-label="Permalink to &quot;输入&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>system_id</td><td>string</td><td>项目ID</td><td>-</td><td>标识系统唯一性</td></tr><tr><td>device_id</td><td>string</td><td>设备ID</td><td>-</td><td>标识设备唯一性</td></tr><tr><td>interval</td><td>int</td><td>定时上报间隔</td><td>1000</td><td>单位ms</td></tr></tbody></table><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-label="Permalink to &quot;输出&quot;">​</a></h3><p>消息列表</p><table tabindex="0"><thead><tr><th>主题</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>{system_id}/{device_type}/{device_id}/status/timer</td><td>定时上报的状态</td><td>-</td></tr><tr><td>{system_id}/{device_type}/{device_id}/status/change</td><td>状态变更时的状态</td><td>-</td></tr><tr><td>{system_id}/{device_type}/{device_id}/config/update</td><td>配置更新的状态</td><td>-</td></tr></tbody></table><h3 id="虚拟设备启动流程" tabindex="-1">虚拟设备启动流程 <a class="header-anchor" href="#虚拟设备启动流程" aria-label="Permalink to &quot;虚拟设备启动流程&quot;">​</a></h3><ol><li><p>启动<code>虚拟设备Mqtt代理</code></p></li><li><p>连接设备</p></li><li><p>启动设备<code>状态检查服务</code></p></li><li><p>定时发布设备状态</p></li><li><p>发布设备状态变更，如果状态变更</p></li></ol>`,37)),(e(),c(r,null,{default:a(()=>[n(i,{id:"mermaid-388",class:"mermaid my-class",graph:"graph%20TD%3B%0A%20%20%20%20A%5B%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87Mqtt%E4%BB%A3%E7%90%86%5D%20--%3E%20B%5B%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%5D%3B%0A%20%20%20%20B%20--%3E%20C%5B%E5%90%AF%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5%E6%9C%8D%E5%8A%A1%5D%3B%0A%20%20%20%20C%20--%3E%20D%5B%E5%AE%9A%E6%97%B6%E5%8F%91%E5%B8%83%E8%AE%BE%E5%A4%87%E7%8A%B6%E6%80%81%5D%3B%0A%20%20%20%20D%20--%3E%20E%5B%E5%8F%91%E5%B8%83%E8%AE%BE%E5%A4%87%E7%8A%B6%E6%80%81%E5%8F%98%E6%9B%B4%5D%3B%0A"})]),fallback:a(()=>t[0]||(t[0]=[p(" Loading... ")])),_:1}))])}const q=d(h,[["render",u]]);export{y as __pageData,q as default};
