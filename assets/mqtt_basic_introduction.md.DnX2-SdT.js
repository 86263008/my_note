import{_ as e,c as t,o as r,a0 as i}from"./chunks/framework.CUtHynuh.js";const u=JSON.parse('{"title":"MQTT协议入门","description":"","frontmatter":{"title":"MQTT协议入门","outline":"deep"},"headers":[],"relativePath":"mqtt/basic/introduction.md","filePath":"mqtt/basic/introduction.md"}'),o={name:"mqtt/basic/introduction.md"};function l(h,a,n,s,d,T){return r(),t("div",null,a[0]||(a[0]=[i('<h1 id="mqtt协议入门" tabindex="-1">MQTT协议入门 <a class="header-anchor" href="#mqtt协议入门" aria-label="Permalink to &quot;MQTT协议入门&quot;">​</a></h1><p>本文是MQTT协议的入门教程，涵盖基础知识、工作原理、使用教程、协议优势、进阶知识及未来趋势，帮助读者全面了解MQTT协议。</p><p><a href="https://www.emqx.com/zh/blog/the-easiest-guide-to-getting-started-with-mqtt" target="_blank" rel="noreferrer">https://www.emqx.com/zh/blog/the-easiest-guide-to-getting-started-with-mqtt</a></p><nav class="table-of-contents"><ul><li><a href="#mqtt-的工作流程">MQTT 的工作流程</a></li><li><a href="#mqtt基础">MQTT基础</a><ul><li><a href="#定义与适用场景">定义与适用场景</a></li><li><a href="#适用于物联网的原因">适用于物联网的原因</a></li></ul></li><li><a href="#核心概念">核心概念</a><ul><li><a href="#mqtt-broker">MQTT Broker</a></li><li><a href="#发布-订阅模式">发布-订阅模式</a></li><li><a href="#主题">主题</a></li><li><a href="#qos">QoS</a></li><li><a href="#保留消息">保留消息</a></li><li><a href="#clean-session">Clean Session</a></li><li><a href="#遗嘱消息">遗嘱消息</a></li></ul></li></ul></nav><h2 id="mqtt-的工作流程" tabindex="-1">MQTT 的工作流程 <a class="header-anchor" href="#mqtt-的工作流程" aria-label="Permalink to &quot;MQTT 的工作流程&quot;">​</a></h2><ol><li><p>客户端使用 TCP/IP 协议与 Broker 建立连接</p></li><li><p>客户端既可以向特定主题发布消息，也可以订阅主题以接收消息</p></li><li><p>MQTT Broker 接收发布的消息，并将这些消息转发给订阅了对应主题的客户端。它根据 QoS 等级确保消息可靠传递，</p></li></ol><h2 id="mqtt基础" tabindex="-1">MQTT基础 <a class="header-anchor" href="#mqtt基础" aria-label="Permalink to &quot;MQTT基础&quot;">​</a></h2><h3 id="定义与适用场景" tabindex="-1">定义与适用场景 <a class="header-anchor" href="#定义与适用场景" aria-label="Permalink to &quot;定义与适用场景&quot;">​</a></h3><p>MQTT是轻量级发布 - 订阅消息传输协议，适用于资源受限设备和网络环境，在物联网中应用广泛。</p><h3 id="适用于物联网的原因" tabindex="-1">适用于物联网的原因 <a class="header-anchor" href="#适用于物联网的原因" aria-label="Permalink to &quot;适用于物联网的原因&quot;">​</a></h3><p>具有轻量级、可靠、安全通信、双向通信、连续有状态会话、支持大规模设备、语言支持广泛等特点。</p><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><p>包含MQTT客户端、MQTT Broker，基于发布 - 订阅模式，通过主题路由消息，并通过QoS保证消息传递可靠性。</p><h3 id="mqtt-broker" tabindex="-1">MQTT Broker <a class="header-anchor" href="#mqtt-broker" aria-label="Permalink to &quot;MQTT Broker&quot;">​</a></h3><p>MQTT Broker 是负责处理客户端请求的关键组件，包括建立连接、断开连接、订阅和取消订阅等操作，同时还负责消息的转发</p><h3 id="发布-订阅模式" tabindex="-1">发布-订阅模式 <a class="header-anchor" href="#发布-订阅模式" aria-label="Permalink to &quot;发布-订阅模式&quot;">​</a></h3><p>发布者和订阅者之间无需建立直接连接，而是通过 MQTT Broker 来负责消息的路由和分发</p><h3 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h3><p>主题是消息的路由标识符，用于区分不同类型的消息。主题通过 / 来区分层级，支持通配符（<code>+</code>和<code>#</code>）订阅。</p><h3 id="qos" tabindex="-1">QoS <a class="header-anchor" href="#qos" aria-label="Permalink to &quot;QoS&quot;">​</a></h3><p>MQTT 提供了三种服务质量（QoS），在不同网络环境下保证消息的可靠性。</p><ul><li>QoS 0：消息最多传送一次。如果当前客户端不可用，它将丢失这条消息。</li><li>QoS 1：消息至少传送一次。</li><li>QoS 2：消息只传送一次。</li></ul><h3 id="保留消息" tabindex="-1">保留消息 <a class="header-anchor" href="#保留消息" aria-label="Permalink to &quot;保留消息&quot;">​</a></h3><p>保留消息是指在订阅者离线时，MQTT Broker 会将最新的消息保留下来，当订阅者重新连接时，会接收到最新的消息。</p><h3 id="clean-session" tabindex="-1">Clean Session <a class="header-anchor" href="#clean-session" aria-label="Permalink to &quot;Clean Session&quot;">​</a></h3><p>Clean Session 是指在断开连接时，MQTT Broker 是否保留客户端的会话状态。</p><ul><li>Clean Session 为 true：MQTT Broker 会保留客户端的会话状态，包括订阅关系和 QoS 等级。</li></ul><h3 id="遗嘱消息" tabindex="-1">遗嘱消息 <a class="header-anchor" href="#遗嘱消息" aria-label="Permalink to &quot;遗嘱消息&quot;">​</a></h3><p>遗嘱消息是指在客户端断开连接时，MQTT Broker 会向其他客户端发送一条消息，通知其他客户端该客户端已经断开连接。</p>',29)]))}const q=e(o,[["render",l]]);export{u as __pageData,q as default};
