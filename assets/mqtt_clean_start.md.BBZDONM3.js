import{_ as e,c as t,o as l,a0 as r}from"./chunks/framework.CUtHynuh.js";const p=JSON.parse('{"title":"Clean Start","description":"","frontmatter":{"title":"Clean Start","outline":"deep"},"headers":[],"relativePath":"mqtt/clean_start.md","filePath":"mqtt/clean_start.md"}'),i={name:"mqtt/clean_start.md"};function n(o,a,s,h,c,d){return l(),t("div",null,a[0]||(a[0]=[r('<h1 id="clean-start" tabindex="-1">Clean Start <a class="header-anchor" href="#clean-start" aria-label="Permalink to &quot;Clean Start&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#mqtt会话机制概述">MQTT会话机制概述</a><ul><li><a href="#引入原因">引入原因</a></li><li><a href="#定义">定义</a></li></ul></li><li><a href="#clean-start详解">Clean Start详解</a><ul><li><a href="#位置与功能">位置与功能</a></li><li><a href="#取值影响">取值影响</a></li></ul></li><li><a href="#session-expiry-interval详解">Session Expiry Interval详解</a><ul><li><a href="#位置与功能-1">位置与功能</a></li><li><a href="#取值影响-1">取值影响</a></li><li><a href="#会话与client-id关系">会话与Client ID关系</a></li><li><a href="#与mqtt-3-1-1对比">与MQTT 3.1.1对比</a></li></ul></li></ul></nav><h2 id="mqtt会话机制概述" tabindex="-1">MQTT会话机制概述 <a class="header-anchor" href="#mqtt会话机制概述" aria-label="Permalink to &quot;MQTT会话机制概述&quot;">​</a></h2><h3 id="引入原因" tabindex="-1">引入原因 <a class="header-anchor" href="#引入原因" aria-label="Permalink to &quot;引入原因&quot;">​</a></h3><p>物联网场景中设备常因网络或电源问题频繁断连，若每次连接都建立全新上下文，会导致客户端重连后需重新订阅、错过离线消息、无法保证QoS等问题，因此MQTT设计了会话机制。</p><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>MQTT会话是服务端和客户端额外存储的上下文数据，可跨越多个连续网络连接，服务端借此存储客户端订阅列表等信息，客户端重连时无需重新订阅，减少服务端开销。</p><h2 id="clean-start详解" tabindex="-1">Clean Start详解 <a class="header-anchor" href="#clean-start详解" aria-label="Permalink to &quot;Clean Start详解&quot;">​</a></h2><h3 id="位置与功能" tabindex="-1">位置与功能 <a class="header-anchor" href="#位置与功能" aria-label="Permalink to &quot;位置与功能&quot;">​</a></h3><p>位于CONNECT报文可变报头，通过设置0或1指定是否复用已存在会话。</p><h3 id="取值影响" tabindex="-1">取值影响 <a class="header-anchor" href="#取值影响" aria-label="Permalink to &quot;取值影响&quot;">​</a></h3><p>设置为0时，若服务端存在与Client ID关联的会话则复用，不存在则创建新会话，且根据情况设置CONNACK报文中的Session Present字段；设置为1时，客户端和服务端丢弃已存在会话，开始全新会话，同时设置Session Present字段为0。</p><h2 id="session-expiry-interval详解" tabindex="-1">Session Expiry Interval详解 <a class="header-anchor" href="#session-expiry-interval详解" aria-label="Permalink to &quot;Session Expiry Interval详解&quot;">​</a></h2><h3 id="位置与功能-1" tabindex="-1">位置与功能 <a class="header-anchor" href="#位置与功能-1" aria-label="Permalink to &quot;位置与功能&quot;">​</a></h3><p>是CONNECT报文可变报头的可选连接属性，用于指定会话在网络断开后在服务端保留的最长时间。</p><h3 id="取值影响-1" tabindex="-1">取值影响 <a class="header-anchor" href="#取值影响-1" aria-label="Permalink to &quot;取值影响&quot;">​</a></h3><p>未指定或设置为0，会话在网络连接断开时立即结束；设置为大于0的值，会话在断开指定秒数后过期；设置为0xFFFFFFFF，会话永不过期。客户端还可在断开连接时通过DISCONNECT报文更新会话过期时间。</p><h3 id="会话与client-id关系" tabindex="-1">会话与Client ID关系 <a class="header-anchor" href="#会话与client-id关系" aria-label="Permalink to &quot;会话与Client ID关系&quot;">​</a></h3><p>服务端用Client ID唯一标识会话，客户端若要复用会话，必须使用一致的Client ID。MQTT 5.0之前版本不支持服务端返回自动分配的Client ID，在自动分配Client ID和使用持久会话间只能二选一。</p><h3 id="与mqtt-3-1-1对比" tabindex="-1">与MQTT 3.1.1对比 <a class="header-anchor" href="#与mqtt-3-1-1对比" aria-label="Permalink to &quot;与MQTT 3.1.1对比&quot;">​</a></h3><p>MQTT 3.1.1的会话机制仅通过Clean Session字段控制，灵活性较差。将Clean Session设置为0等同于MQTT 5.0中Clean Start为0且Session Expiry Interval为0xFFFFFFFF；设置为1等同于Clean Start为1且Session Expiry Interval为0 。EMQX为MQTT 3.1.1客户端提供配置项设置全局会话过期时间，以控制资源消耗。</p>',21)]))}const q=e(i,[["render",n]]);export{p as __pageData,q as default};
